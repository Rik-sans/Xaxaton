import streamlit as st
import requests
import os
from datetime import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
st.set_page_config(
    page_title="–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π RAG –ß–∞—Ç-–±–æ—Ç",
    page_icon="ü§ñ",
    layout="wide"
)


# --- –°—Ç–∏–ª–∏ ---
def load_css():
    st.markdown("""
    <style>
        .stChatInput {position: fixed; bottom: 2rem;}
        .stChatMessage {padding: 1rem; border-radius: 0.5rem;}
        .user-message {background-color: #f0f2f6; margin-left: 30%;}
        .bot-message {background-color: #e6f7ff; margin-right: 30%;}
        .timestamp {font-size: 0.8rem; color: #666; text-align: right;}
    </style>
    """, unsafe_allow_html=True)


load_css()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ ---
if "messages" not in st.session_state:
    st.session_state.messages = []
    st.session_state.api_calls = 0


# --- Langflow API Client ---
class LangflowClient:
    def __init__(self):
        self.api_key = self._get_api_key()
        self.base_url = "http://localhost:7860/api/v1/run/f2561e64-5978-4b95-9e54-39492f739a5d"

    def _get_api_key(self):
        """–ì–µ–Ω–∏–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            return os.environ["LANGFLOW_API_KEY"]
        except KeyError:
            try:
                from dotenv import load_dotenv
                load_dotenv()
                return os.environ["LANGFLOW_API_KEY"]
            except:
                st.error("LANGFLOW_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
                st.stop()

    def query_rag(self, question: str) -> str:
        """–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫ RAG —Å–∏—Å—Ç–µ–º–µ"""
        headers = {
            "Content-Type": "application/json",
            "x-api-key": self.api_key
        }

        payload = {
            "output_type": "chat",
            "input_type": "chat",
            "input_value": question
        }

        try:
            response = requests.post(
                self.base_url,
                json=payload,
                headers=headers,
                timeout=30  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )

            response.raise_for_status()
            st.session_state.api_calls += 1

            return response.json().get("result", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã")

        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Langflow API: {str(e)}")
            return None
        except Exception as e:
            st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return None


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def display_chat():
    """–ë–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
    st.title("üß† –ì–µ–Ω–∏–∞–ª—å–Ω—ã–π RAG –ß–∞—Ç-–±–æ—Ç")
    st.caption(f"API –≤—ã–∑–æ–≤–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {st.session_state.api_calls}")

    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if message.get("timestamp"):
                st.caption(message["timestamp"])

    # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timestamp = datetime.now().strftime("%H:%M:%S")
        st.session_state.messages.append({
            "role": "user",
            "content": prompt,
            "timestamp": timestamp
        })

        with st.chat_message("user"):
            st.markdown(prompt)
            st.caption(timestamp)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG
        with st.spinner("–î—É–º–∞—é..."):
            langflow_client = LangflowClient()
            response = langflow_client.query_rag(prompt)

            if response:
                timestamp = datetime.now().strftime("%H:%M:%S")
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response,
                    "timestamp": timestamp
                })

                with st.chat_message("assistant"):
                    st.markdown(response)
                    st.caption(timestamp)


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    display_chat()